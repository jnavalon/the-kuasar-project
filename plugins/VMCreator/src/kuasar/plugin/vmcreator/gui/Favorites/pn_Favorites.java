/*
 *  Copyright (C) 2011 jnavalon
 * 
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * pn_Favorites.java
 *
 * Created on 23/01/2011, 18:23:12
 */

package kuasar.plugin.vmcreator.gui.Favorites;

import java.io.File;
import java.io.FileFilter;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.util.HashMap;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import kuasar.plugin.vmcreator.gui.tooltasks.AddHost.Namespace.keyMaps;
import kuasar.plugin.vmcreator.utils.Others;

/**
 *
 * @author jnavalon
 */
public class pn_Favorites extends kuasar.plugin.classMod.AbstractPanel {

    DefaultListModel model = new DefaultListModel();
    /** Creates new form pn_Favorites */
    public pn_Favorites() {
        initComponents();
        scp_Favorites.getViewport().setOpaque(false);
        lst_Favorites.setCellRenderer(new Lst_Favorites_CellRender());
        lst_Favorites.setModel(model);
        loadData();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pn_Aux = new javax.swing.JPanel();
        scp_Favorites = new javax.swing.JScrollPane();
        lst_Favorites = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(204, 0, 51));
        setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        setOpaque(false);
        addHierarchyBoundsListener(new java.awt.event.HierarchyBoundsListener() {
            public void ancestorMoved(java.awt.event.HierarchyEvent evt) {
            }
            public void ancestorResized(java.awt.event.HierarchyEvent evt) {
                formAncestorResized(evt);
            }
        });

        pn_Aux.setBackground(new java.awt.Color(255, 255, 102));
        pn_Aux.setOpaque(false);

        javax.swing.GroupLayout pn_AuxLayout = new javax.swing.GroupLayout(pn_Aux);
        pn_Aux.setLayout(pn_AuxLayout);
        pn_AuxLayout.setHorizontalGroup(
            pn_AuxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 191, Short.MAX_VALUE)
        );
        pn_AuxLayout.setVerticalGroup(
            pn_AuxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 76, Short.MAX_VALUE)
        );

        scp_Favorites.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        scp_Favorites.setViewportBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        lst_Favorites.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        lst_Favorites.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lst_Favorites.setOpaque(false);
        scp_Favorites.setViewportView(lst_Favorites);

        jLabel1.setForeground(new java.awt.Color(205, 205, 205));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/star.png"))); // NOI18N
        jLabel1.setText("Favorites");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pn_Aux, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 191, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(scp_Favorites, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scp_Favorites, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pn_Aux, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formAncestorResized(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_formAncestorResized
       this.updateUI();
    }//GEN-LAST:event_formAncestorResized

    public void reload(){
        loadData();
    }

    private void loadData(){
        model.removeAllElements();
        File dir = new File(((String) kuasar.plugin.Intercom.ODR.getValue("$PLUGINDIR")) + File.separator + kuasar.plugin.vmcreator.Config.path + File.separator + kuasar.plugin.vmcreator.Config.favorites);
        if(!dir.exists())return;
        if(!dir.isDirectory()){
            System.err.println("Error: File isn't a directory! :: " + dir.getPath());
            return;
        }
        for(File file : dir.listFiles(new BinFilter())){
            if(file.isFile()){
                loadFile(file);
            }
        }
        lst_Favorites.updateUI();
    }

    private void loadFile(File file){
        {
            ObjectInputStream ois = null;
            try {
                 ois=new ObjectInputStream(new FileInputStream(file));
                 HashMap<String,Object> map = (HashMap<String,Object>)ois.readObject();
                 Object[] data = new Object[2];
                 data[0] = new ImageIcon( getClass().getResource("/icons/netlist/"+Others.getIcon((Integer) map.get(keyMaps.OS + ".id"))));
                 data[1] = file.getName().substring(0, file.getName().lastIndexOf('.'));
                 model.addElement(data);
                 lst_Favorites.setModel(model);
            } catch (ClassNotFoundException ex) {
                System.err.println("Error: " + file.getAbsolutePath() + " isn't a correct HashMap file");
            } catch (IOException ex) {
                System.err.println("Error: " + ex.getMessage() + " :: " + file.getAbsolutePath());
            } finally {
                try {
                    ois.close();
                } catch (IOException ex) {
                    System.err.println("Error: " + ex.getMessage() +  " :: " + file.getAbsolutePath());
                }
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList lst_Favorites;
    private javax.swing.JPanel pn_Aux;
    private javax.swing.JScrollPane scp_Favorites;
    // End of variables declaration//GEN-END:variables

}
class BinFilter implements FileFilter {

  public boolean accept(File pathname) {

    if (pathname.getName().endsWith(".bin"))
      return true;
    return false;
  }
}